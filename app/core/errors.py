from fastapi import Request, status
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from schemas.errors import ErrorModel


async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """
    Catch validation errors generated by FastAPI (status code 422)
    Send custom and formatted errors instead (status code 400)
    """
    stringify_errors = [str(e) for e in exc.errors()]
    return JSONResponse(
        content=jsonable_encoder(
            ErrorModel(
                status_code=f"{len(stringify_errors)} validation errors",
                sub_status_codes=stringify_errors,
            )
        ),
        status_code=status.HTTP_400_BAD_REQUEST,
    )
